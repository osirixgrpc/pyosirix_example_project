# See https://pypi.org/project/bump2version/ for more information on bumpversion.

# Define the general rules for bumpversion.
[bumpversion]
current_version = 0.0.1-dev0
git-commit = False
git-tag = False
parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\-(?P<release>[a-z]+)(?P<build>\d+))?
serialize =
	{major}.{minor}.{patch}-{release}{build}
	{major}.{minor}.{patch}

# What increments when you do `bumpversion release`.
[bumpversion:part:release]
first_value = dev
optional_value = void
values =
	dev
	rc
	beta
	void

# Define the files and search patterns for other files.
[bumpversion:file:VERSION]

# You can also define what to search for in each file and what to replace it with.
[bumpversion:file:pyproject.toml]
search = {current_version}
replace = {new_version}

[bumpversion:file:mkdocs.yaml]
search = ver {current_version}
replace = ver {new_version}

# In the issue templates we try to automatically populate the version people are using to latest.
[bumpversion:file:./.github/ISSUE_TEMPLATE/bug.yaml]
search = placeholder: "{current_version}"
replace = placeholder: "{new_version}"

[bumpversion:file:./.github/ISSUE_TEMPLATE/documentation.yaml]
search = placeholder: "{current_version}"
replace = placeholder: "{new_version}"

[bumpversion:file:./.github/ISSUE_TEMPLATE/feature_request.yaml]
search = placeholder: "{current_version}"
replace = placeholder: "{new_version}"

[bumpversion:file:./.github/ISSUE_TEMPLATE/generic.yaml]
search = placeholder: "{current_version}"
replace = placeholder: "{new_version}"